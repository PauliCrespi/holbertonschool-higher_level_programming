========================
0-add_integer.py 
========================

Add two integers function.
===========================
Module:
===========================

	>>> add_integer = __import__('0-add_integer').add_integer

===========================
Documentation
===========================

	>>> module_doc = __import__("0-add_integer").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("0-add_integer").add_integer.__doc__
	>>> print(len(func_doc) > 0)
	True

====================
Tests:
=================================================================================
SUCCESS CASES: numbers have to be int, float is accepted but converted into int.
Values can be positive and negative.
=================================================================================

	>>> add_integer(0, 0)
	0
	
	>>> add_integer(8, 1)
	9

	>>> add_integer(-2, -4)
	-6

	>>> add_integer(-18, 10)
	-8

==================================
FLOAT CASES: decimals are rounded
==================================

	>>> add_integer(1000.1, 1045.0009)
	2045

	>>> add_integer(567.9, 100.8)
	667

==================================
DEFAULT B VALUE = 98
==================================

	>>> add_integer(0)
	98

	>>> add_integer(100)
	198

=======================================
Error case: a or b is not int or float 
=======================================

	>>> add_integer("hello", 98)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer("78k", "i")
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(2, "hi")
	Traceback (most recent call last):
	TypeError: b must be an integer

=======================================
ERROR CASE: None
=======================================

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(None, 10)
	Traceback (most recent call last):
	TypeError: a must be an integer
